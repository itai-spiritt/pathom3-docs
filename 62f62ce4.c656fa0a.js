(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{105:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(r),m=n,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||o;return r?a.a.createElement(f,i(i({ref:t},p),{},{components:r})):a.a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},72:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return u}));var n=r(2),a=r(6),o=(r(0),r(105)),s={title:"Shape Descriptor"},i={unversionedId:"shape-descriptor",id:"shape-descriptor",isDocsHomePage:!1,title:"Shape Descriptor",description:"Shape descriptor is a format to express data shapes used internally by Pathom.",source:"@site/docs/shape-descriptor.mdx",slug:"/shape-descriptor",permalink:"/docs/shape-descriptor",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/shape-descriptor.mdx",version:"current",sidebar:"docs",previous:{title:"Planner",permalink:"/docs/planner"},next:{title:"GraphQL",permalink:"/docs/integrations/graphql"}},c=[],p={rightToc:c};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Shape descriptor is a format to express data shapes used internally by Pathom."),Object(o.b)("p",null,"We can compare it to EQL to represent some example data shape:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'; sample data\n{:user/name         "usuario"\n ; nested map\n :user/billing-card {:card/number "123"}\n ; nested map sequence\n :user/friends      [{:user/id 1}\n                     {:user/id 2}]}\n\n; in EQL, we can describe that shape as:\n[:user/name\n {:user/billing-card [:card/number]}\n {:user/friends [:user/id]}]\n\n; same representation using the shape descriptor format:\n{:user/name         {}\n :user/billing-card {:card/number {}}\n :user/friends      {:user/id {}}}\n')),Object(o.b)("p",null,"Pathom uses shape descriptor when it needs to know if some attribute is available in\nsome given data, this format preserves the structure of the data, without the details."),Object(o.b)("p",null,"Compared to EQL it's faster to use for this case, given that it has indexed lookups\nto verify the presence of some attribute."),Object(o.b)("p",null,"The namespace ",Object(o.b)("inlineCode",{parentName:"p"},"com.wsscode.pathom3.format.shape-descriptor")," contains helpers to work\nwith this format."))}u.isMDXComponent=!0}}]);