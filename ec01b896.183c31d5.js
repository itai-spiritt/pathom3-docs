(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{105:function(e,a,t){"use strict";t.d(a,"a",(function(){return d})),t.d(a,"b",(function(){return h}));var n=t(0),s=t.n(n);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function m(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=s.a.createContext({}),p=function(e){var a=s.a.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},d=function(e){var a=p(e.components);return s.a.createElement(i.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},b=s.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,r=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),d=p(t),b=n,h=d["".concat(r,".").concat(b)]||d[b]||l[b]||o;return t?s.a.createElement(h,c(c({ref:a},i),{},{components:t})):s.a.createElement(h,c({ref:a},i))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,r=new Array(o);r[0]=b;var c={};for(var m in a)hasOwnProperty.call(a,m)&&(c[m]=a[m]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var i=2;i<o;i++)r[i]=t[i];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},182:function(e,a,t){"use strict";t.d(a,"a",(function(){return o}));var n=t(0),s=t.n(n);function o(e){var a="https://www.youtube.com/embed/"+e.videoId;return s.a.createElement("iframe",{width:"560",height:"315",src:a,frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})}},94:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return c})),t.d(a,"metadata",(function(){return m})),t.d(a,"rightToc",(function(){return i})),t.d(a,"default",(function(){return d}));var n=t(2),s=t(6),o=(t(0),t(105)),r=t(182),c={id:"smart-maps",title:"Smart Maps"},m={unversionedId:"smart-maps",id:"smart-maps",isDocsHomePage:!1,title:"Smart Maps",description:"Smart maps are a custom map type powered by Pathom resolvers.",source:"@site/docs/smart-maps.mdx",slug:"/smart-maps",permalink:"/docs/smart-maps",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/smart-maps.mdx",version:"current",sidebar:"docs",previous:{title:"Built-in Resolvers",permalink:"/docs/built-in-resolvers"},next:{title:"EQL",permalink:"/docs/eql"}},i=[{value:"Using smart maps",id:"using-smart-maps",children:[{value:"Nested maps",id:"nested-maps",children:[]},{value:"Nested sequences",id:"nested-sequences",children:[]},{value:"Error modes",id:"error-modes",children:[]},{value:"Disable nested wrap",id:"disable-nested-wrap",children:[]},{value:"Preload data",id:"preload-data",children:[]}]},{value:"Keys modes",id:"keys-modes",children:[]},{value:"Changes to smart maps",id:"changes-to-smart-maps",children:[]},{value:"Inside smart maps",id:"inside-smart-maps",children:[]},{value:"Debugging reads",id:"debugging-reads",children:[]},{value:"Smart Maps caching",id:"smart-maps-caching",children:[]},{value:"Datafy",id:"datafy",children:[]}],p={rightToc:i};function d(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Smart maps are a custom map type powered by Pathom resolvers."),Object(o.b)("p",null,"With smart maps, you can leverage the power of Pathom processing using the accessible\nstandard Clojure map interfaces."),Object(o.b)("h2",{id:"using-smart-maps"},"Using smart maps"),Object(o.b)("p",null,"To create a smart map, we need the indexes with resolvers, here is a basic example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(ns com.wsscode.pathom.docs.smart-maps-demo\n  (:require [com.wsscode.pathom3.connect.indexes :as pci]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [com.wsscode.pathom3.interface.smart-map :as psm]))\n\n(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(def indexes (pci/register full-name))\n\n(def person-data {::first-name "Anne" ::last-name "Frank"})\n\n(def smart-map (psm/smart-map indexes person-data))\n\n; if you lookup for a key in the initial data, it works the same way as a regular map\n(::first-name smart-map) ; => "Anne"\n\n; but when you read something that\'s not there, it will trigger the Pathom engine to\n; fulfill the attribute\n(::full-name smart-map) ; => "Anne Frank"\n')),Object(o.b)("p",null,"When you start a smart map, Pathom creates an atom with the initial data, and then when\nyou request some new information, Pathom triggers the resolver engine, merges the result\nin the same atom and returns the value for that key, effectively caching it."),Object(o.b)("p",null,"This way, the subsequent accesses have the same speed as a local entry."),Object(o.b)("h3",{id:"nested-maps"},"Nested maps"),Object(o.b)("p",null,"Nested map values are wrapped with a smart map using the same environment configuration. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(pco/defresolver anne []\n  {::anne {::first-name "Anne" ::last-name "Frank"}})\n\n(def indexes (pci/register [full-name anne]))\n\n(def smart-map (psm/smart-map indexes))\n\n(::anne smart-map) ; => {::first-name "Anne" ::last-name "Frank"}\n\n; nested access\n(-> smart-map ::anne ::full-name) ; => "Anne Frank"\n')),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This only applies to native Clojure/script maps. It doesn't wrap records and other\ncustom map types."))),Object(o.b)("h3",{id:"nested-sequences"},"Nested sequences"),Object(o.b)("p",null,"It also applies for maps inside sequences:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(pco/defresolver stars []\n  {::star-wars-characters\n   [{::first-name "Luke" ::last-name "Skywalker"}\n    {::first-name "Darth" ::last-name "Vader"}\n    {::first-name "Han" ::last-name "Solo"}]})\n\n(def indexes (pci/register [full-name stars]))\n\n(def smart-map (psm/smart-map indexes))\n\n; nested access on sequences\n(mapv ::full-name (::star-wars-characters smart-map))\n; => ["Luke Skywalker"\n;     "Darth Vader"\n;     "Han Solo"]\n')),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Smart maps do the conversion of sequence items to smart maps on the sequence read. This\nmeans that anytime you read a sequence on a smart map, if the sequence is a ",Object(o.b)("inlineCode",{parentName:"p"},"vector"),", that\nscan will be done eagerly. Otherwise, it will use ",Object(o.b)("inlineCode",{parentName:"p"},"map"),", and the processing is lazy."))),Object(o.b)("h3",{id:"error-modes"},"Error modes"),Object(o.b)("p",null,"By default, if some error happens during the Pathom process, the Smart Map is going\nto be silent about it. You can allow the errors to flow up by using the ",Object(o.b)("inlineCode",{parentName:"p"},"psm/with-error-mode"),"\nhelper:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(pco/defresolver error-resolver []\n  {:error (throw (ex-info "Error" {}))})\n\n(let [sm (-> (pci/register error-resolver)\n             (psm/with-error-mode ::psm/error-mode-loud)\n             (psm/smart-map))]\n  (:error sm))\n; => Execution error (ExceptionInfo) at ...\n;    Error\n')),Object(o.b)("p",null,"The options for error mode are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"::psm/error-mode-silent")," (default): Return ",Object(o.b)("inlineCode",{parentName:"li"},"nil")," as the value, don't throw errors."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"::psm/error-mode-loud"),": Throw the errors on read.")),Object(o.b)("h3",{id:"disable-nested-wrap"},"Disable nested wrap"),Object(o.b)("p",null,"You can disable the automatic nest wrap using ",Object(o.b)("inlineCode",{parentName:"p"},"(psm/with-wrap-nested? false)")," in the env."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(psm/smart-map (-> indexes\n                   (psm/with-wrap-nested? false)\n  {:initial-data "value"}))\n')),Object(o.b)("p",null,"Then all values will return as-is."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"You can manually wrap nested values in the same way the library does by using the same\nenv on the value, for example:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(psm/smart-map (psm/sm-env smart-map) (::map-value smart-map))\n")))),Object(o.b)("h3",{id:"preload-data"},"Preload data"),Object(o.b)("p",null,"If you know the attributes you will need ahead of time, it's more efficient to load then\nin a single run than fetching one by one lazily."),Object(o.b)("p",null,"You can accomplish this using the fn ",Object(o.b)("inlineCode",{parentName:"p"},"psm/touch!"),", example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(pco/defresolver right [{::keys [left width]}]\n  {::right (+ left width)})\n\n(pco/defresolver bottom [{::keys [top height]}]\n  {::bottom (+ top height)})\n\n(def indexes (pci/register [right bottom]))\n\n(def square {::left  10 ::top 30\n             ::width 23 ::height 35})\n\n(def smart-map\n  (-> (psm/smart-map indexes square)\n      (psm/sm-touch! [::right ::bottom])))\n\n(::right smart-map) ; => 33, read from cache\n(::bottom smart-map) ; => 65, read from cache\n")),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"You can also use ",Object(o.b)("inlineCode",{parentName:"p"},"psm/sm-touch-ast!")," to provide an AST directly."))),Object(o.b)("h2",{id:"keys-modes"},"Keys modes"),Object(o.b)("p",null,"Smart Maps keys mode is a configuration to decide how a smart map respond to ",Object(o.b)("inlineCode",{parentName:"p"},"(keys smart-map)")),Object(o.b)("p",null,"To change this, use the helper ",Object(o.b)("inlineCode",{parentName:"p"},"(psm/with-keys-mode ...)"),", these are the available options\nfor it:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"::psm/keys-mode-cached")," - the default option, ",Object(o.b)("inlineCode",{parentName:"li"},"keys")," will return the keys cached\nin the internal smart map atom."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"::psm/keys-mode-reachable")," - ",Object(o.b)("inlineCode",{parentName:"li"},"keys")," will return all possible keys that are reachable\nfrom the current data and the index.")),Object(o.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"danger")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Be careful with ",Object(o.b)("inlineCode",{parentName:"p"},"::psm/keys-mode-reachable"),' combined with enabled "nested wrapping".\nConsidering that, depending on the index and the current data, a simple ',Object(o.b)("inlineCode",{parentName:"p"},"print")," of the\nsmart map can lead to infinite loops due to smart maps' recursive properties."))),Object(o.b)("h2",{id:"changes-to-smart-maps"},"Changes to smart maps"),Object(o.b)("p",null,"You can use the change operations of maps in the smart map (",Object(o.b)("inlineCode",{parentName:"p"},"assoc"),", ",Object(o.b)("inlineCode",{parentName:"p"},"dissoc"),", ...)."),Object(o.b)("p",null,"When a change operation happens, you get a new smart map. Be aware this new smart map\ndoesn't have the cached data from resolvers from the previous one. The modification is\ndone from the ",Object(o.b)("inlineCode",{parentName:"p"},"source map"),", the one used to create the smart map in the first place."),Object(o.b)("p",null,"This is important so any data computed by resolvers can react to the changes based on\nthe new data context. The following example illustrates this behavior:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(def indexes (pci/register full-name))\n\n(def person-data {::first-name "John" ::last-name "Lock"})\n\n(def smart-map (psm/smart-map indexes person-data))\n\n(::full-name smart-map) ; => "John Lock"\n\n(-> smart-map\n    (assoc ::last-name "Oliver")\n    ::full-name)\n; => "John Oliver", the full-name gets re-computed due to the change\n')),Object(o.b)("h2",{id:"inside-smart-maps"},"Inside smart maps"),Object(o.b)("p",null,"The smart map data structure contains an ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/environment"}),"environment")," inside of it, there\nyou can find the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/indexes"}),"indexes"),", the cached data, and any other relevant options that\nmake the setup of the smart map."),Object(o.b)("p",null,"You can access the smart map environment using ",Object(o.b)("inlineCode",{parentName:"p"},"psm/sm-env"),". This includes all the data\nyou sent as ",Object(o.b)("inlineCode",{parentName:"p"},"env")," during the smart map creation, plus the cache atom."),Object(o.b)("h2",{id:"debugging-reads"},"Debugging reads"),Object(o.b)("p",null,"Sometimes the result will be unexpected, to debug the smart map you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"psm/sm-get-with-stats"),"\nfunction to return the run stats of the process:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(def indexes\n  (pci/register\n    [(pbir/constantly-resolver ::n 10)\n     (pbir/single-attr-resolver ::n ::x inc)\n     (pbir/single-attr-resolver ::x ::y #(* % 2))\n     (pbir/single-attr-resolver ::y ::z #(- % 10))]))\n\n(-> (psm/smart-map indexes)\n    (psm/sm-get-with-stats ::y))\n;{:com.wsscode.pathom3.connect.planner/index-attrs #:com.wsscode.pathom.docs.smart-maps-demo{:n #{3},\n;                                                                                            :y #{1},\n;                                                                                            :x #{2}},\n; :com.wsscode.pathom3.connect.planner/unreachable-attrs {},\n; :com.wsscode.pathom3.connect.runner/graph-process-duration-ms 0.11225199699401855,\n; :com.wsscode.pathom3.connect.runner.stats/overhead-duration-ms 0.09637504816055298,\n; :com.wsscode.pathom3.connect.planner/root 3,\n; :com.wsscode.pathom3.connect.runner.stats/overhead-duration-percentage 0.8585597650052356,\n; :com.wsscode.pathom3.connect.runner/node-run-stats {1 #:com.wsscode.pathom3.connect.runner{:run-duration-ms 0.006672978401184082,\n;                                                                                            :node-run-input #:com.wsscode.pathom.docs.smart-maps-demo{:x 11}},\n;                                                     3 #:com.wsscode.pathom3.connect.runner{:run-duration-ms 0.004477977752685547,\n;                                                                                            :node-run-input {}},\n;                                                     2 #:com.wsscode.pathom3.connect.runner{:run-duration-ms 0.004725992679595947,\n;                                                                                            :node-run-input #:com.wsscode.pathom.docs.smart-maps-demo{:n 10}}},\n; :com.wsscode.pathom3.connect.planner/index-ast #:com.wsscode.pathom.docs.smart-maps-demo{:y {:key :com.wsscode.pathom.docs.smart-maps-demo/y,\n;                                                                                              :type :prop,\n;                                                                                              :dispatch-key :com.wsscode.pathom.docs.smart-maps-demo/y}},\n; :com.wsscode.pathom3.connect.planner/unreachable-resolvers #{},\n; :com.wsscode.pathom3.interface.smart-map/value 22,\n; :com.wsscode.pathom3.connect.planner/index-resolver->nodes {com.wsscode.pathom.docs.smart_maps_demo_SLASH_x->com.wsscode.pathom.docs.smart_maps_demo_SLASH_y-single-attr-transform #{1},\n;                                                             com.wsscode.pathom.docs.smart_maps_demo_SLASH_n-constant #{3},\n;                                                             com.wsscode.pathom.docs.smart_maps_demo_SLASH_n->com.wsscode.pathom.docs.smart_maps_demo_SLASH_x-single-attr-transform #{2}},\n; :com.wsscode.pathom3.connect.planner/nodes {1 {:com.wsscode.pathom3.connect.planner/after-nodes #{2},\n;                                                :com.wsscode.pathom3.connect.planner/requires #:com.wsscode.pathom.docs.smart-maps-demo{:y {}},\n;                                                :com.wsscode.pathom3.connect.operation/op-name com.wsscode.pathom.docs.smart_maps_demo_SLASH_x->com.wsscode.pathom.docs.smart_maps_demo_SLASH_y-single-attr-transform,\n;                                                :com.wsscode.pathom3.connect.planner/source-for-attrs #{:com.wsscode.pathom.docs.smart-maps-demo/y},\n;                                                :com.wsscode.pathom3.connect.planner/input #:com.wsscode.pathom.docs.smart-maps-demo{:x {}},\n;                                                :com.wsscode.pathom3.connect.planner/node-id 1},\n;                                             3 {:com.wsscode.pathom3.connect.planner/requires #:com.wsscode.pathom.docs.smart-maps-demo{:n {}},\n;                                                :com.wsscode.pathom3.connect.operation/op-name com.wsscode.pathom.docs.smart_maps_demo_SLASH_n-constant,\n;                                                :com.wsscode.pathom3.connect.planner/source-for-attrs #{:com.wsscode.pathom.docs.smart-maps-demo/n},\n;                                                :com.wsscode.pathom3.connect.planner/input {},\n;                                                :com.wsscode.pathom3.connect.planner/run-next 2,\n;                                                :com.wsscode.pathom3.connect.planner/node-id 3},\n;                                             2 {:com.wsscode.pathom3.connect.planner/after-nodes #{3},\n;                                                :com.wsscode.pathom3.connect.planner/requires #:com.wsscode.pathom.docs.smart-maps-demo{:x {}},\n;                                                :com.wsscode.pathom3.connect.operation/op-name com.wsscode.pathom.docs.smart_maps_demo_SLASH_n->com.wsscode.pathom.docs.smart_maps_demo_SLASH_x-single-attr-transform,\n;                                                :com.wsscode.pathom3.connect.planner/source-for-attrs #{:com.wsscode.pathom.docs.smart-maps-demo/x},\n;                                                :com.wsscode.pathom3.connect.planner/input #:com.wsscode.pathom.docs.smart-maps-demo{:n {}},\n;                                                :com.wsscode.pathom3.connect.planner/run-next 1,\n;                                                :com.wsscode.pathom3.connect.planner/node-id 2}},\n; :com.wsscode.pathom3.connect.runner.stats/resolver-accumulated-duration-ms 0.015876948833465576}\n")),Object(o.b)("h2",{id:"smart-maps-caching"},"Smart Maps caching"),Object(o.b)("p",null,"Smart maps use a durable form of the cache by default. The smart maps add the caches\nat initialization, and they are persisted when variations of that Smart Map are created."),Object(o.b)("p",null,"This means, for example, when you ",Object(o.b)("inlineCode",{parentName:"p"},"assoc")," on a Smart Map, the new returned Smart Map still shares the same plan and resolver caches."),Object(o.b)("h2",{id:"datafy"},"Datafy"),Object(o.b)("p",null,"Smart Maps support the Clojure Datafy / Navigate protocols. This means if you use a REPL\nvisualizer like ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://vlaaad.github.io/reveal/"}),"Reveal")," or ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.datomic.com/cloud/other-tools/REBL.html"}),"REBL"),"\nyou can navigate the projected data from the Smart Map lazily."),Object(o.b)("p",null,"To demonstrate I'll be showing its usage with Reveal in the following video:"),Object(o.b)(r.a,{videoId:"n_MJOKEqqnM",mdxType:"YoutubeVideo"}),Object(o.b)("p",null,"Also in REBL:"),Object(o.b)(r.a,{videoId:"v4vzdLRrkr8",mdxType:"YoutubeVideo"}))}d.isMDXComponent=!0}}]);