(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),l=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,b=p["".concat(i,".").concat(d)]||p[d]||h[d]||o;return n?a.a.createElement(b,s(s({ref:t},u),{},{components:n})):a.a.createElement(b,s({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(105)),i={title:"Nouns"},s={unversionedId:"nouns",id:"nouns",isDocsHomePage:!1,title:"Nouns",description:"This page contains a list with brief descriptions of the nouns used in Pathom.",source:"@site/docs/nouns.mdx",slug:"/nouns",permalink:"/docs/nouns",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/nouns.mdx",version:"current",sidebar:"docs",previous:{title:"Pathom Tutorial - IP Weather",permalink:"/docs/tutorial"},next:{title:"Resolvers",permalink:"/docs/resolvers"}},c=[{value:"EQL Request",id:"eql-request",children:[]},{value:"Entity",id:"entity",children:[]},{value:"Resolver",id:"resolver",children:[]},{value:"Mutation",id:"mutation",children:[]},{value:"Operation",id:"operation",children:[]},{value:"Cache Store",id:"cache-store",children:[]},{value:"Planner",id:"planner",children:[]},{value:"Runner",id:"runner",children:[]},{value:"Smart Maps",id:"smart-maps",children:[]}],u={rightToc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This page contains a list with brief descriptions of the nouns used in Pathom."),Object(o.b)("h2",{id:"eql-request"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"https://edn-query-language.org/"}),"EQL Request")),Object(o.b)("p",null,"EQL is the main interface to communicate with Pathom, with EQL you describe the shape of the\nresponse data you need, and Pathom uses its engine to realize the data. EQL syntax also supports\nthe calling of mutations that enables a layer of side effects to be invoked in a request."),Object(o.b)("h2",{id:"entity"},"Entity"),Object(o.b)("p",null,"Most maps returned by Pathom are considered entities, but not all of them. When you make a request\nand ask for specific keys of a map, that's an entity, but there are some opaque maps (from Pathom\nperspective), in these cases they are not entities."),Object(o.b)("h2",{id:"resolver"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"/docs/resolvers"}),"Resolver")),Object(o.b)("p",null,"The primary building block of Pathom data resolution, resolvers represent edges on the graph\nof data traversing, they always provide at least one attribute, and usually have some input\nrequirement."),Object(o.b)("h2",{id:"mutation"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"/docs/mutations"}),"Mutation")),Object(o.b)("p",null,"Mutations are the ",Object(o.b)("inlineCode",{parentName:"p"},"write")," side of Pathom. They provide entry points to run some operation that\nusually does some side effects."),Object(o.b)("h2",{id:"operation"},"Operation"),Object(o.b)("p",null,"The parent type of Resolvers and Mutations. The common trait they share is that both have a\nmap containing configuration data."),Object(o.b)("h2",{id:"cache-store"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"/docs/cache"}),"Cache Store")),Object(o.b)("p",null,"Pathom uses caches all over the place and provides a way to the user to implement custom behavior\non how this caching works."),Object(o.b)("h2",{id:"planner"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"/docs/planner"}),"Planner")),Object(o.b)("p",null,"The planner is a critical part of Pathom 3. The planner is the algorithm core of the system, it\nreceives the context of the request and produces a data structure with instructions of how to\nexecute which functions in which order to resolve the user demand."),Object(o.b)("h2",{id:"runner"},"Runner"),Object(o.b)("p",null,"The runner starts from a plan produced by the planner and go about executing it."),Object(o.b)("h2",{id:"smart-maps"},Object(o.b)("a",Object(r.a)({parentName:"h2"},{href:"/docs/smart-maps"}),"Smart Maps")),Object(o.b)("p",null,"Smart Maps provide an alternative interface to use the Pathom system that doesn't depend on the\nEQL. Smart maps are less efficient than using EQL, but are handy when you want to enable the resolution\npower of Pathom integrated with the simple interface of Clojure maps."))}l.isMDXComponent=!0}}]);