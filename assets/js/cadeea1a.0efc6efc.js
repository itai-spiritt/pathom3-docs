"use strict";(self.webpackChunkpathom_3_docs=self.webpackChunkpathom_3_docs||[]).push([[359],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),u=r,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||a;return t?o.createElement(h,s(s({ref:n},d),{},{components:t})):o.createElement(h,s({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={title:"Foreign Environments"},s=void 0,i={unversionedId:"foreign",id:"foreign",title:"Foreign Environments",description:"Foreign parsers is a sub-system of Dynamic Resolvers, which are still in research/experimental",source:"@site/docs/foreign.mdx",sourceDirName:".",slug:"/foreign",permalink:"/docs/foreign",draft:!1,editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/foreign.mdx",tags:[],version:"current",frontMatter:{title:"Foreign Environments"},sidebar:"docs",previous:{title:"Debugging",permalink:"/docs/debugging"},next:{title:"Dynamic Resolvers",permalink:"/docs/dynamic-resolvers"}},c={},l=[{value:"Foreign setup",id:"foreign-setup",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Foreign HTTP Example",id:"foreign-http-example",level:2}],d={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Foreign parsers is a sub-system of ",(0,r.kt)("a",{parentName:"p",href:"/docs/dynamic-resolvers"},"Dynamic Resolvers"),", which are still in research/experimental\nstages.")),(0,r.kt)("p",null,"Foreign Pathom is the ability of Pathom 3 to make automatic integration between different\nPathom environments."),(0,r.kt)("p",null,"This mechanism provides a simple way to connect resolvers that may run in completely different\ncontexts (different machines or processes)."),(0,r.kt)("h2",{id:"foreign-setup"},"Foreign setup"),(0,r.kt)("p",null,"To demonstrate it working, let's start with some resolvers to list some TODO ids and\nanother resolver to pull the TODO details."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(ns com.wsscode.pathom3.docs.demos.core.foreign\n  (:require [com.wsscode.pathom3.connect.operation :as pco]\n            [com.wsscode.pathom3.connect.indexes :as pci]\n            [com.wsscode.pathom3.interface.eql :as p.eql]\n            [com.wsscode.pathom3.connect.foreign :as pcf]))\n\n(def todo-db\n  {1 {:todo/id    1\n      :todo/title "Write foreign docs"\n      :todo/done? true}\n   2 {:todo/id    2\n      :todo/title "Integrate the whole internet"\n      :todo/done? false}})\n\n(pco/defresolver todo-items []\n  {::pco/output\n   [{:app/all-todos\n     [:todo/id]}]}\n  ; export only the ids to force the usage of another resolver for\n  ; the details\n  {:app/all-todos\n   [{:todo/id 1}\n    {:todo/id 2}]})\n\n(pco/defresolver todo-by-id [{:todo/keys [id]}]\n  {::pco/output\n   [:todo/id\n    :todo/title\n    :todo/done?]}\n  (get todo-db id))\n\n(def foreign-env\n  (pci/register\n    {:com.wsscode.pathom3.connect.planner/plan-cache* (atom {})}\n    [todo-items\n     todo-by-id]))\n\n(def foreign-request\n  (p.eql/boundary-interface foreign-env))\n\n(comment\n  (foreign-request\n    [{:app/all-todos\n      [:todo/title\n       :todo/done?]}]))\n')),(0,r.kt)("p",null,"Now we are going to start a new Pathom environment, connect and\nextend the previous one. The local extension will add the ability to know if a TODO\nitem was cancelled. You can imagine this is a separate service responsible for the\ncancellation part of this hypothetical system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(def canceled-todos\n  #{2})\n\n(pco/defresolver todo-canceled? [{:todo/keys [id]}]\n  {:todo/cancelled? (contains? canceled-todos id)})\n\n(def local-env\n  (pci/register\n    {:com.wsscode.pathom3.connect.planner/plan-cache* (atom {})}\n    [; pull the remote instance\n     (pcf/foreign-register foreign-request)\n     ; add our custom resolver on top\n     todo-canceled?]))\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Using the boundary interface ensures the request handler fulfills the\nexpected contract when calling a remote Pathom instance.")),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"When we use ",(0,r.kt)("inlineCode",{parentName:"p"},"(pcf/foreign-register foreign-request)"),", it makes a request that asks\nfor the indexes available in that instance."),(0,r.kt)("p",null,"You can try it yourself by requesting the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"[:com.wsscode.pathom3.connect.indexes/indexes]\n")),(0,r.kt)("p",null,"Pathom them transform the indexes in dynamic resolvers and\nwe add these new indexes using ",(0,r.kt)("inlineCode",{parentName:"p"},"pci/register"),"."),(0,r.kt)("p",null,"Check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/dynamic-resolvers"},"dynamic resolvers documentation")," for more details\nabout this process."),(0,r.kt)("h2",{id:"foreign-http-example"},"Foreign HTTP Example"),(0,r.kt)("p",null,"It's important to note that the foreign environment might well be in a different machine.\nThe integration process is serializable, and can work over the network."),(0,r.kt)("p",null,"I have this same example deployed at ",(0,r.kt)("a",{parentName:"p",href:"https://southamerica-east1-pathomdemos.cloudfunctions.net/development-pathom-server-demo"},"https://southamerica-east1-pathomdemos.cloudfunctions.net/development-pathom-server-demo")),(0,r.kt)("p",null,"Here is how we can do this integration using this HTTP based communication:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(ns com.wsscode.pathom3.docs.demos.core.foreign\n  (:require\n    [com.wsscode.pathom3.connect.foreign :as pcf]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.operation :as pco]\n    [com.wsscode.pathom3.connect.operation.transit :as pcot]\n    [com.wsscode.pathom3.interface.eql :as p.eql]\n    [com.wsscode.transito :as transito]\n    [org.httpkit.client :as http]))\n\n(defn tread [s]\n  (transito/read-str s {:handlers pcot/read-handlers}))\n\n(defn twrite [x]\n  (transito/write-str x {:handlers pcot/write-handlers}))\n\n; helper to deal with encoding, sending via HTTP and decoding\n(defn request-remote-pathom [url request]\n  (-> @(http/request\n         {:url     url\n          :method  :post\n          :headers {"Content-Type" "application/transit+json"\n                    "Accept"       "application/transit+json"}\n          :body    (twrite request)})\n      :body\n      tread))\n\n(def canceled-todos\n  #{2})\n\n(pco/defresolver todo-canceled? [{:todo/keys [id]}]\n  {:todo/cancelled? (contains? canceled-todos id)})\n\n(def url "https://southamerica-east1-pathomdemos.cloudfunctions.net/development-pathom-server-demo")\n\n(def env\n  (pci/register\n    {:com.wsscode.pathom3.connect.planner/plan-cache* (atom {})}\n    [; pull the remote instance\n     (pcf/foreign-register\n       #(request-remote-pathom url %))\n     ; add our custom resolver on top\n     todo-canceled?]))\n\n(comment\n  (p.eql/process\n    env\n    [{:app/all-todos\n      [:todo/title\n       :todo/done?\n       :todo/cancelled?]}]))\n')))}m.isMDXComponent=!0}}]);