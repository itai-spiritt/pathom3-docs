"use strict";(self.webpackChunkpathom_3_docs=self.webpackChunkpathom_3_docs||[]).push([[618],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={id:"eql",title:"EQL"},i=void 0,s={unversionedId:"eql",id:"eql",title:"EQL",description:"Using the EQL interface, you can request Pathom to fetch a specific shape of data.",source:"@site/docs/eql.mdx",sourceDirName:".",slug:"/eql",permalink:"/docs/eql",draft:!1,editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/eql.mdx",tags:[],version:"current",frontMatter:{id:"eql",title:"EQL"},sidebar:"docs",previous:{title:"Smart Maps",permalink:"/docs/smart-maps"},next:{title:"Environment",permalink:"/docs/environment"}},l={},p=[{value:"Using EQL interface",id:"using-eql-interface",level:2},{value:"Errors",id:"errors",level:3},{value:"Nested entities",id:"nested-entities",level:3},{value:"Providing map data",id:"providing-map-data",level:3},{value:"Providing data via EQL idents",id:"providing-data-via-eql-idents",level:3},{value:"Providing data with placeholders",id:"providing-data-with-placeholders",level:3},{value:"Union queries",id:"union-queries",level:3},{value:"Recursive queries",id:"recursive-queries",level:3},{value:"Wildcard",id:"wildcard",level:3},{value:"Process One",id:"process-one",level:2},{value:"Boundary Interface",id:"boundary-interface",level:2},{value:"Using the boundary interface",id:"using-the-boundary-interface",level:3},{value:"Strict errors as data",id:"strict-errors-as-data",level:3},{value:"Extending environment",id:"extending-environment",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Using the EQL interface, you can request Pathom to fetch a specific shape of data."),(0,r.kt)("p",null,"If you are not familiar with EQL, check ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org"},"https://edn-query-language.org")," for an overview of the syntax."),(0,r.kt)("p",null,"The goal of using EQL is to express some data shape (hierarchy) without the values and\nlet Pathom fill in the values."),(0,r.kt)("p",null,"Using EQL is also the most efficient way to request multiple things at once with Pathom.\nWith EQL, Pathom knows the full request ahead of time. Therefore, Pathom can use this information\nto optimize the planning and execution."),(0,r.kt)("h2",{id:"using-eql-interface"},"Using EQL interface"),(0,r.kt)("p",null,"Keep in mind that EQL is about expressing some data hierarchy, to start simple we will\nuse a flat structure to demonstrate the basic usage of the EQL interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(ns com.wsscode.pathom.docs.eql-demos\n  (:require [com.wsscode.pathom3.connect.built-in.resolvers :as pbir]\n            [com.wsscode.pathom3.connect.indexes :as pci]\n            [com.wsscode.pathom3.interface.eql :as p.eql]))\n\n(def indexes\n  (pci/register\n    [(pbir/constantly-resolver ::pi 3.1415)\n     (pbir/single-attr-resolver ::pi ::tau #(* % 2))]))\n\n(p.eql/process indexes [::pi ::tau])\n; => {::pi 3.1415 ::tau 6.283}\n")),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"Check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/error-handling"},"error handling")," page to learn about error handling on\nEQL."),(0,r.kt)("h3",{id:"nested-entities"},"Nested entities"),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org/eql/1.0.0/specification.html#_joins"},"EQL joins")," you\ncan make specific requirements about nested data. In this example we will simulate the\nexistence of many worlds where PI have different values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(def indexes\n  (pci/register\n    [(pbir/constantly-resolver ::pi 3.1415)\n     (pbir/single-attr-resolver ::pi ::tau #(* % 2))\n     ; define a resolver to provide a collection of items\n     (pbir/constantly-resolver ::pi-worlds\n       [{::pi 3.14}\n        {::pi 3.14159}\n        {::pi 6.8}\n        {::tau 20}\n        {::pi 10 ::tau 50}])]))\n\n(p.eql/process indexes\n  ; using a map we are able to specify nested requirements from some attribute\n  [{::pi-worlds [::tau ::pi]}])\n; => {::pi-worlds\n;      [{::tau 6.28\n;        ::pi  3.14}\n;       {::tau 6.28318\n;        ::pi  3.14159}\n;       {::tau 13.6\n;        ::pi  6.8}\n;       {::tau 20\n;        ::pi  3.1415}\n;       {::tau 50\n;        ::pi  10}]}\n")),(0,r.kt)("h3",{id:"providing-map-data"},"Providing map data"),(0,r.kt)("p",null,"You can provide initial data to the EQL process using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(p.eql/process indexes {::pi 2.3} [::tau])\n; => {::tau 4.6}\n")),(0,r.kt)("h3",{id:"providing-data-via-eql-idents"},"Providing data via EQL idents"),(0,r.kt)("p",null,"Pathom uses the EQL ",(0,r.kt)("inlineCode",{parentName:"p"},"ident")," as a form to specify a single attribute to start requesting\ndata from. Here is an example using the resolvers we created before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(p.eql/process indexes [{[::pi 2.3] [::tau]}])\n; => {[::pi 2.3] {::tau 4.6}}\n")),(0,r.kt)("p",null,"In this example, given ",(0,r.kt)("inlineCode",{parentName:"p"},"PI")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"2.3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Tau")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"4.6"),", since it's defined as the\ndouble of PI."),(0,r.kt)("h3",{id:"providing-data-with-placeholders"},"Providing data with placeholders"),(0,r.kt)("p",null,"You can use placeholders to provide in-query data for Pathom processing. To do this, lets\nget back to our famous full name example, the way to provide data is to send it to\na placeholder key as ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org/eql/1.0.0/specification.html#_parameters"},"EQL parameters"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(def env (pci/register full-name))\n\n(p.eql/process env\n  [{\'(:>/bret {::first-name "Bret" ::last-name "Victor"})\n    [::full-name]}])\n; => {:>/bret {:com.wsscode.pathom3.docs.placeholder/full-name "Bret Victor"}}\n')),(0,r.kt)("p",null,"When moving to a placeholder context, Pathom inherits the same parent data and merges\nthe params data to it, to illustrate let's make a nested example of it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(p.eql/process env\n  [{\'(:>/bret {::first-name "Bret" ::last-name "Victor"})\n    [::full-name\n     {\'(:>/bard {::first-name "Bard"})\n      [::full-name]}]}])\n; {:>/bret\n;   {:com.wsscode.pathom3.docs.placeholder/full-name "Bret Victor",\n;    :>/bard\n;    {:com.wsscode.pathom3.docs.placeholder/full-name "Bard Victor"}}}\n')),(0,r.kt)("h3",{id:"union-queries"},"Union queries"),(0,r.kt)("p",null,"Union queries provide a way to achieve polymorphism in EQL, for a review on the\nunion syntax refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org/eql/1.0.0/specification.html#_unions"},"EQL Union specification page"),"."),(0,r.kt)("p",null,"Consider you want to request information for some user feed. In our feed example, there\nare three types of entries: posts, ads and videos. Each type requires different attributes\nto render. This is how we can write some resolvers to fetch each type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(def union-env\n  (pci/register\n    [(pbir/static-table-resolver `posts :acme.post/id\n       {1 {:acme.post/text "Foo"}})\n     (pbir/static-table-resolver `ads :acme.ad/id\n       {1 {:acme.ad/backlink "http://marketing.is-bad.com"\n           :acme.ad/title    "Promotion thing"}})\n     (pbir/static-table-resolver `videos :acme.video/id\n       {1 {:acme.video/title "Some video"}})\n     (pbir/constantly-resolver :acme/feed\n       [{:acme.post/id 1}\n        {:acme.ad/id 1}\n        {:acme.video/id 1}])]))\n\n(p.eql/process union-env\n  [{:acme/feed\n    {:acme.post/id  [:acme.post/text]\n     :acme.ad/id    [:acme.ad/backlink :acme.ad/title]\n     :acme.video/id [:acme.video/title]}}])\n; => {:acme/feed\n;     [{:acme.post/text "Foo"}\n;      {:acme.ad/backlink "http://marketing.site.com",\n;       :acme.ad/title "Promotion thing"}\n;      {:acme.video/title "Some video"}]}\n')),(0,r.kt)("p",null,"To decide which path to take, Pathom looks if the entry data contains the key mentioned\nin the union entry key. When they match Pathom picks that path option."),(0,r.kt)("p",null,"There is a secondary option, this is more intended for implementors of dynamic resolvers."),(0,r.kt)("p",null,"If the meta contains the meta-data ",(0,r.kt)("inlineCode",{parentName:"p"},"::pf.eql/union-entry-key"),", Pathom will use that\nas the union entry key, example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(def union-env\n  (pci/register\n    [(pbir/single-attr-resolver :acme.post/title :acme.post/link #(str % "-link"))\n     (pbir/single-attr-resolver :acme.ad/x :acme.ad/y inc)\n     (pbir/constantly-resolver :acme/feed\n       [^{:com.wsscode.pathom3.format.eql/union-entry-key :acme.post/id}\n        {:acme.post/title "TITLE"}\n        ^{:com.wsscode.pathom3.format.eql/union-entry-key :acme.ad/id}\n        {:acme.ad/x 1}])]))\n\n(p.eql/process union-env\n  [{:acme/feed\n    {:acme.post/id [:acme.post/link]\n     :acme.ad/id   [:acme.ad/y]}}])\n; => {:acme/feed\n;     [{:acme.post/link "TITLE-link"}\n;      {:acme.ad/y 2}]}\n')),(0,r.kt)("h3",{id:"recursive-queries"},"Recursive queries"),(0,r.kt)("p",null,"Some data shapes are trees. For example, if we like to map a file system with Pathom."),(0,r.kt)("p",null,"I'll start writing a few resolvers to handle paths and directory navigation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(pco/defresolver file-from-path [{:keys [path]}]\n  {:file (io/file path)})\n\n(pco/defresolver file-name [{:keys [^File file]}]\n  {:file-name (.getName file)})\n\n(pco/defresolver directory? [{:keys [^File file]}]\n  {:directory? (.isDirectory file)})\n\n(pco/defresolver directory-files [{:keys [^File file directory?]}]\n  {::pco/output [{:files [:file]}]}\n  {:files\n   (if directory?\n     (mapv #(hash-map :file %) (.listFiles file))\n     ::pco/unknown-value)})\n\n(def file-env\n  (pci/register\n    [file-from-path\n     file-name\n     directory?\n     directory-files]))\n")),(0,r.kt)("p",null,"To demonstrate the recursive property of it, I'll write the same nested query a few times\nto show it up:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(comment\n  (p.eql/process file-env\n    {:path "src"}\n    [:file-name\n     {:files [:file-name\n              {:files [:file-name\n                       {:files []}]}]}]))\n')),(0,r.kt)("p",null,"Instead of doing that, we can use ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org/eql/1.0.0/specification.html#_recursive_queries"},"EQL recursive queries"),"\nto handle it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(comment\n  (p.eql/process file-env\n    {:path "src"}\n    [:file-name\n     {:files \'...}]))\n')),(0,r.kt)("p",null,"The previous example creates an unbounded recursion. It's going to keep going until\nthere is no more depth to go."),(0,r.kt)("p",null,"You can also limit this using bounded recursive queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(comment\n  (p.eql/process file-env\n    {:path "src"}\n    [:file-name\n     ; max of 2 depths\n     {:files 2}]))\n')),(0,r.kt)("h3",{id:"wildcard"},"Wildcard"),(0,r.kt)("p",null,"In EQL queries, you can use the special symbol ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," to ask Pathom to give all the data\navailable for that entity. In other words, this removes the output filtering at that\nlevel. Here is an example of what it means:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'; define a resolver that returns multiple things\n(pco/defresolver user-data []\n  {:user/name       "foo"\n   :user/email      "some-user@email.com"\n   :user/birth-year 1988})\n\n; standard query\n(p.eql/process (pci/register user-data)\n    [:user/name])\n; gets the output filtered, only the items in query show up\n=> #:user{:name "foo"}\n\n; making query adding the *\n(p.eql/process (pci/register user-data)\n    [:user/name \'*])\n; now all the data that was loaded in process will show up in the result\n=> #:user{:name "foo", :email "some-user@email.com", :birth-year 1988}\n\n; another example, now we can see the whole deps showing up\n(p.eql/process\n    (pci/register\n      [user-data\n       (pbir/single-attr-resolver :user/name :user/name++ #(str % " - extra things"))])\n    [:user/name++ \'*])\n=>\n#:user{:name++ "foo - extra things",\n       :name "foo",\n       :email "some-user@email.com",\n       :birth-year 1988}\n')),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," only affects sibling attributes (things at same entity/level), the following\nexample illustrates it:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(p.eql/process\n  (pci/register user-data)\n  [{:>/ent1 [:user/name \'*\n             {:>/nested [:user/email]}]}\n   {:>/ent2 [:user/birth-year]}])\n=>\n#:>{:ent1 {:user/name "foo",\n           :>/nested #:user{:email "some-user@email.com"},\n           :user/email "some-user@email.com",\n           :user/birth-year 1988},\n    :ent2 #:user{:birth-year 1988}}\n'))),(0,r.kt)("h2",{id:"process-one"},"Process One"),(0,r.kt)("p",null,"Sometimes you just want a single value instead of a map of values as the output. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"p.eql/process-one")," wrapper facilitates this use case:"),(0,r.kt)("p",null,"Simplest usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(p.eql/process-one env :foo)\n")),(0,r.kt)("p",null,"Same as process, you can send initial data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(p.eql/process-one env {:data "here"} :foo)\n')),(0,r.kt)("p",null,"You can also use joins and param expressions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(p.eql/process-one env {:join [:sub-query]})\n(p.eql/process-one env \'(:param {:expr "sion"}))\n')),(0,r.kt)("h2",{id:"boundary-interface"},"Boundary Interface"),(0,r.kt)("p",null,"The Pathom EQL design makes it a suitable solution to enable remote communication via\nEQL syntax."),(0,r.kt)("p",null,"By receiving an EQL request which is pure data, a server can fetch information and\ninvoke mutations."),(0,r.kt)("p",null,"This is a powerful API, and it's something that Pathom is designed to handle."),(0,r.kt)("h3",{id:"using-the-boundary-interface"},"Using the boundary interface"),(0,r.kt)("p",null,"Using the boundary interface adds the following capabilities to the request:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add support to load the index via EQL (through ",(0,r.kt)("inlineCode",{parentName:"li"},"::pci/indexes")," attribute)"),(0,r.kt)("li",{parentName:"ul"},"Support provision of root entity data"),(0,r.kt)("li",{parentName:"ul"},"Support requests in ",(0,r.kt)("a",{parentName:"li",href:"https://edn-query-language.org/eql/1.0.0/specification.html"},"AST format")),(0,r.kt)("li",{parentName:"ul"},"Strict mode errors are turned into a data format instead of throwing")),(0,r.kt)("p",null,"Combined, those features allow another Pathom instance to integrate this graph."),(0,r.kt)("p",null,"The request to a boundary interface can be either an ",(0,r.kt)("inlineCode",{parentName:"p"},"EQL")," request or a map. The map\nhas the following options available:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'; initial entity data\n:pathom/entity {:foo "3"}\n\n; the request in EQL format\n:pathom/eql [:foo]\n\n; the request in AST format\n:pathom/ast {:type     :root\n             :children [{:type :prop\n                         :key :foo\n                         :dispatch-key :foo}]}\n\n; activate lenient mode, check error handling page for more details\n; or set false to force strict mode\n:pathom/lenient-mode? true\n')),(0,r.kt)("p",null,"You should either use ",(0,r.kt)("inlineCode",{parentName:"p"},":pathom/eql")," or ",(0,r.kt)("inlineCode",{parentName:"p"},":pathom/ast"),". If both are present, Pathom will\npick the AST."),(0,r.kt)("p",null,"Here you can see an example of a setup and usage of the boundary interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(ns com.wsscode.pathom3.docs.demos.core.eql\n  (:require\n    [com.wsscode.pathom3.interface.eql :as p.eql]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.built-in.resolvers :as pbir]\n    [com.wsscode.pathom3.connect.operation :as pco])\n  (:import (java.util Date)))\n\n(pco/defresolver area [{:geo/keys [width height]}]\n  {:geo/area (* width height)})\n\n(def env\n  (pci/register\n    [(pbir/constantly-fn-resolver ::now (fn [_] (Date.)))\n     area]))\n\n(def pathom (p.eql/boundary-interface env))\n\n; request EQL\n(pathom [::now])\n\n; send root entity data\n(pathom {:pathom/entity {:geo/width 10 :geo/height 8}\n         :pathom/eql    [:geo/area]})\n\n; use AST, this way Pathom doesn't have to decode the EQL\n(pathom\n  {:pathom/ast {:type     :root\n                :children [{:type         :prop\n                            :key          ::now\n                            :dispatch-key ::now}]}})\n")),(0,r.kt)("p",null,"It's recommended that you always use this at API boundaries."),(0,r.kt)("h3",{id:"strict-errors-as-data"},"Strict errors as data"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Strict errors as data is feature from Pathom 3 ",(0,r.kt)("inlineCode",{parentName:"p"},"2022.02.21-alpha+")," versions.")),(0,r.kt)("p",null,"When using the boundary interface, errors that would normally throw when using the EQL\ninterface directly will be turned into a map format. This is more suitable to a boundary\ninterface because then we can send this error reporting over the wire with ease."),(0,r.kt)("p",null,"The error format is opinionated, and it looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'{:com.wsscode.pathom3.error/error-message "Pathom can\'t find a path for the following elements in the query: [:wrong] at path []",\n :com.wsscode.pathom3.error/error-data {:com.wsscode.pathom3.connect.planner/graph {:com.wsscode.pathom3.connect.planner/nodes {},\n                                                                                    :com.wsscode.pathom3.connect.planner/index-ast {:wrong {:type :prop,\n                                                                                                                                            :dispatch-key :wrong,\n                                                                                                                                            :key :wrong}},\n                                                                                    :com.wsscode.pathom3.connect.planner/source-ast {:type :root,\n                                                                                                                                     :children [{:type :prop,\n                                                                                                                                                 :dispatch-key :wrong,\n                                                                                                                                                 :key :wrong}]},\n                                                                                    :com.wsscode.pathom3.connect.planner/available-data {},\n                                                                                    :com.wsscode.pathom3.connect.planner/unreachable-paths {:wrong {}}},\n                                        :com.wsscode.pathom3.connect.planner/unreachable-paths {:wrong {}},\n                                        :com.wsscode.pathom3.path/path [],\n                                        :com.wsscode.pathom3.error/phase :com.wsscode.pathom3.connect.planner/plan,\n                                        :com.wsscode.pathom3.error/cause :com.wsscode.pathom3.error/attribute-unreachable},\n :com.wsscode.pathom3.error/error-stack "clojure.lang.ExceptionInfo: Pathom can\'t find a path for the following elements in the query: [:wrong] at path [] {:com.wsscode.pathom3.connect.planner/graph {:com.wsscode.pathom3.connect.planner/nodes {}, :com.wsscode.pathom3.connect.planner/index-ast {:wrong {:type :prop, :dispatch-key :wrong, :key :wrong}}, :com.wsscode.pathom3.connect.planner/source-ast {:type :root, :children [{:type :prop, :dispatch-key :wrong, :key :wrong}]}, :com.wsscode.pathom3.connect.planner/available-data {}, :com.wsscode.pathom3.connect.planner/unreachable-paths {:wrong {}}}, :com.wsscode.pathom3.connect.planner/unreachable-paths {:wrong {}}, :com.wsscode.pathom3.path/path [], :com.wsscode.pathom3.error/phase :com.wsscode.pathom3.connect.planner/plan, :com.wsscode.pathom3.error/cause :com.wsscode.pathom3.error/attribute-unreachable}\n                                         \\tat com.wsscode.pathom3.connect.planner$verify_plan_BANG__STAR_.invokeStatic(planner.cljc:1510)\n                                         \\tat com.wsscode.pathom3.connect.planner$verify_plan_BANG__STAR_.invoke(planner.cljc:1500)\n                                         \\tat com.wsscode.pathom3.connect.planner$verify_plan_BANG_.invokeStatic(planner.cljc:1529)\n                                         \\tat com.wsscode.pathom3.connect.planner$verify_plan_BANG_.invoke(planner.cljc:1522)\n                                         ..."}\n')),(0,r.kt)("p",null,"Then, clients on the receiving end can use this to report the error back."),(0,r.kt)("h3",{id:"extending-environment"},"Extending environment"),(0,r.kt)("p",null,"The boundary API design is to make it flexible, and although is more efficient\nto initialize as much as possible before in the env, it still allows extension of\nit."),(0,r.kt)("p",null,"To extend the env you can send another argument to the boundary interface."),(0,r.kt)("p",null,"For example, let's say we have a resolver to get data from the current user. The current\nuser is something we like to set at the start of the process, but we don't want to allow\nusers to override it (for security reasons)."),(0,r.kt)("p",null,"In this case we can set the user id on env when we call the boundary interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(def users-db\n  {1 {:user/login "bunny"}\n   2 {:user/login "fox"}})\n\n(pco/defresolver current-user [{:keys [app/current-user-id]} _]\n  {::pco/output [:user/login]}\n  (get users-db current-user-id))\n\n(def env (pci/register current-user))\n\n(def pathom (p.eql/boundary-interface env))\n\n(pathom {:app/current-user-id 1} [:user/login])\n; => {:user/login "bunny"}\n')),(0,r.kt)("p",null,"In this example we sent env as a map, the boundary interface gets this map and merges\ninto the previous env and runs."),(0,r.kt)("p",null,"The env extension can also be a function, this allows more complex operations like\nregistering new resolvers, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(pathom\n  (fn [env]\n    (-> env\n        (assoc :app/current-user-id 2)\n        (pci/register (pbir/single-attr-resolver :user/login :user/greet #(str "Hello " %)))))\n  [:user/greet])\n; => {:user/greet "Hello fox"}\n')))}d.isMDXComponent=!0}}]);