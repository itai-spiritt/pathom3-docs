"use strict";(self.webpackChunkpathom_3_docs=self.webpackChunkpathom_3_docs||[]).push([[520],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,h=p["".concat(i,".").concat(u)]||p[u]||m[u]||o;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9366:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={title:"Placeholders"},s=void 0,l={unversionedId:"placeholders",id:"placeholders",title:"Placeholders",description:"Placeholders allow the user to add structure to some EQL request. They work as a special",source:"@site/docs/placeholders.mdx",sourceDirName:".",slug:"/placeholders",permalink:"/docs/placeholders",draft:!1,editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/placeholders.mdx",tags:[],version:"current",frontMatter:{title:"Placeholders"},sidebar:"docs",previous:{title:"Cache",permalink:"/docs/cache"},next:{title:"Mutations",permalink:"/docs/mutations"}},i={},c=[{value:"Provide data",id:"provide-data",level:2},{value:"Compose different views",id:"compose-different-views",level:2},{value:"Conflict params",id:"conflict-params",level:3},{value:"Isolation break",id:"isolation-break",level:3},{value:"Solving with placeholders",id:"solving-with-placeholders",level:3}],d={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Placeholders allow the user to add structure to some EQL request. They work as a special\nattribute namespace, by default, Pathom recognize any attribute with the namespace ",(0,r.kt)("inlineCode",{parentName:"p"},">")," as\na placeholder attribute."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can configure the placeholder namespaces by setting the option ",(0,r.kt)("inlineCode",{parentName:"p"},"com.wsscode.pathom3.placeholder/placeholder-prefixes"),"\nin the env, the default value is ",(0,r.kt)("inlineCode",{parentName:"p"},'#{">"}'),".")),(0,r.kt)("p",null,"In this guide, you will go over a few examples of how to use placeholders."),(0,r.kt)("h2",{id:"provide-data"},"Provide data"),(0,r.kt)("p",null,"You can use placeholders to provide in-query data for Pathom processing. To do this, lets\nget back to our famous full name example, the way to provide data is to send it to\na placeholder key as ",(0,r.kt)("a",{parentName:"p",href:"https://edn-query-language.org/eql/1.0.0/specification.html#_parameters"},"EQL parameters"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(pco/defresolver full-name [{::keys [first-name last-name]}]\n  {::full-name (str first-name " " last-name)})\n\n(def env (pci/register full-name))\n\n(p.eql/process env\n  [{\'(:>/bret {::first-name "Bret" ::last-name "Victor"})\n    [::full-name]}])\n; => {:>/bret {:com.wsscode.pathom3.docs.placeholder/full-name "Bret Victor"}}\n')),(0,r.kt)("p",null,"When moving to a placeholder context, Pathom inherits the same parent data and merges\nthe params data to it, to illustrate let's make a nested example of it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(p.eql/process env\n  [{\'(:>/bret {::first-name "Bret" ::last-name "Victor"})\n    [::full-name\n     {\'(:>/bard {::first-name "Bard"})\n      [::full-name]}]}])\n; {:>/bret\n;   {:com.wsscode.pathom3.docs.placeholder/full-name "Bret Victor",\n;    :>/bard\n;    {:com.wsscode.pathom3.docs.placeholder/full-name "Bard Victor"}}}\n')),(0,r.kt)("h2",{id:"compose-different-views"},"Compose different views"),(0,r.kt)("p",null,"For this example, consider a system where you make a UI out of components, and each\ncomponent has its query to express its data needs. Here are some of these\ncomponent queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(def header-view-eql\n  [:acme.customer/full-name])\n\n(def latest-orders-eql\n  [{:acme.customer/orders\n    [:acme.order/id\n     :acme.order/description]}])\n\n(def address-eql\n  [:acme.address/street\n   :acme.address/number\n   :acme.address/zipcode])\n")),(0,r.kt)("p",null,'One thing these queries have in common, is that they are "about" the same entity, always\nthe same customer, but different data about it. You might be tempted to just concatenate\nthe queries, something like:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(into [] (concat header-view-eql latest-orders-eql address-eql))\n; [:acme.customer/full-name\n;  {:acme.customer/orders [:acme.order/id :acme.order/description]}\n;  :acme.address/street\n;  :acme.address/number\n;  :acme.address/zipcode]\n")),(0,r.kt)("p",null,"Then run this query and send the full result to all the components, and for this specific\nexample that would work, but I need to point some problems with this approach to you:"),(0,r.kt)("h3",{id:"conflict-params"},"Conflict params"),(0,r.kt)("p",null,"Let's add a new component to this system that breaks the previous solution, this is the\nnew component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"(def expensive-orders-eql\n  [{'(:acme.customer/orders {::filter-price-gt 100})\n    [:acme.order/id\n     :acme.order/description]}])\n")),(0,r.kt)("p",null,"Note this component uses the same attribute that ",(0,r.kt)("inlineCode",{parentName:"p"},"latest-orders-eql")," did, but it uses\nEQL parameters to affect the request. Now we have two components that need the same\nattribute but with different data. This is not possible and causes an attribute\nconflict for the planner."),(0,r.kt)("p",null,"To have those two points of data in the same response, they need to be at different\nplaces."),(0,r.kt)("h3",{id:"isolation-break"},"Isolation break"),(0,r.kt)("p",null,"Another problem with merging the queries is that the code gets data it didn't ask for. To\nillustrate this, let's imagine the following code to display the data from the address\ncomponent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(defn render-address [{:acme.address/keys [street number zipcode]}]\n  (str "Send to: " street ", " number ", " zipcode))\n')),(0,r.kt)("p",null,"Now we also want to display the user name, so we change it to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(defn render-address [{:acme.address/keys  [street number zipcode]\n                       :acme.customer/keys [full-name]}]\n  (str "Send to " full-name " at: " street ", " number ", " zipcode))\n')),(0,r.kt)("p",null,"If we use the previous combined query, without changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"address-eql")," to also ask for ",(0,r.kt)("inlineCode",{parentName:"p"},":acme.customer/full-name"),', this\ncode "accidentally works", because ',(0,r.kt)("inlineCode",{parentName:"p"},"header-view-eql")," was asking for ",(0,r.kt)("inlineCode",{parentName:"p"},":acme.customer/full-name"),". This can turn into\nbig headaches in the long run because by changing one component, you may affect other components."),(0,r.kt)("h3",{id:"solving-with-placeholders"},"Solving with placeholders"),(0,r.kt)("p",null,"The solution to fix the previous issues is to put each component into a different\nplaceholder path, this way each one gets full isolation from each other:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},"[{:>/header header-view-eql}\n {:>/latest latest-orders-eql}\n {:>/address address-eql}\n {:>/expensive expensive-orders-eql}]\n")),(0,r.kt)("p",null,"This way, Pathom guarantees isolation for each path, no more shared data, and each\ncomponent can ask different params, and Pathom knows how to deal with it."))}m.isMDXComponent=!0}}]);