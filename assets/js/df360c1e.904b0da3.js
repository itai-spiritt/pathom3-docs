"use strict";(self.webpackChunkpathom_3_docs=self.webpackChunkpathom_3_docs||[]).push([[807],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={title:"Built-in Plugins"},o=void 0,l={unversionedId:"built-in-plugins",id:"built-in-plugins",title:"Built-in Plugins",description:"Here you will find information about built-in plugins.",source:"@site/docs/built-in-plugins.mdx",sourceDirName:".",slug:"/built-in-plugins",permalink:"/docs/built-in-plugins",draft:!1,editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/built-in-plugins.mdx",tags:[],version:"current",frontMatter:{title:"Built-in Plugins"},sidebar:"docs",previous:{title:"Plugins",permalink:"/docs/plugins"},next:{title:"Async",permalink:"/docs/async"}},p={},s=[{value:"Extend environment",id:"extend-environment",level:2},{value:"Resolve mutations params",id:"resolve-mutations-params",level:2}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here you will find information about built-in plugins."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-clojure"},"[com.wsscode.pathom3.connect.built-in.plugins :as pbip]\n")),(0,i.kt)("h2",{id:"extend-environment"},"Extend environment"),(0,i.kt)("p",null,"The plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"pbip/env-wrap-plugin")," provides a simple way to inject dynamic content\nat the env at the start of each request."),(0,i.kt)("p",null,"The following example demonstrates how to set an attribute ",(0,i.kt)("inlineCode",{parentName:"p"},":now")," in the env that\ncontains the time that the process starts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-clojure"},'(def env\n  (-> (pci/register (pbir/constantly-fn-resolver :time :now))\n      (p.plugin/register\n        [(pbip/env-wrap-plugin #(assoc % :now (java.util.Date.)))])))\n\n(p.eql/process env [:time]) ; => {:time #inst "..."}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"env-wrap-plugin")," takes a function that will receive the env and should return\nthe modified env."),(0,i.kt)("h2",{id:"resolve-mutations-params"},"Resolve mutations params"),(0,i.kt)("p",null,"On Pathom, when you call a mutation, the params flow without any alteration. The default\nbehavior is meant to give the fastest path possible to invoke mutations."),(0,i.kt)("p",null,'That said, it\'s common also to want the params to be "resolved", just like Pathom does\nwith inputs on resolvers.'),(0,i.kt)("p",null,"To make that happen, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"mutation-resolve-params")," built-in plugin. When\nyou add this plugin, Pathom will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"::pco/params")," as a query and will run that\non the user params, and then deliver the resolved data to the mutation."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-clojure"},"(pco/defmutation foo [{:keys [b]}]\n  {:res b})\n\n(p.eql/process\n  (-> (pci/register\n        [(pbir/single-attr-resolver :a :b inc)\n         foo])\n      (p.plugin/register pbip/mutation-resolve-params))\n  [`(foo {:a 1})])\n; => {foo {:res 2}}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"pco/defmutation"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"::pco/params")," is inferred from the argument destructuring.")))}m.isMDXComponent=!0}}]);