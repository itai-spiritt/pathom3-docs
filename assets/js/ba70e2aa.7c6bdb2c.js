"use strict";(self.webpackChunkpathom_3_docs=self.webpackChunkpathom_3_docs||[]).push([[175],{3905:(e,t,a)=>{a.d(t,{kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=l(a),u=r,d=h["".concat(p,".").concat(u)]||h[u]||c[u]||o;return a?n.createElement(d,s(s({ref:t},m),{},{components:a})):n.createElement(d,s({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7447:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={title:"Scripting with Babashka"},s=void 0,i={unversionedId:"tutorials/babashka",id:"tutorials/babashka",title:"Scripting with Babashka",description:"Pathom 3 works with Babashka!",source:"@site/docs/tutorials/babashka.mdx",sourceDirName:"tutorials",slug:"/tutorials/babashka",permalink:"/docs/tutorials/babashka",draft:!1,editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/tutorials/babashka.mdx",tags:[],version:"current",frontMatter:{title:"Scripting with Babashka"},sidebar:"docs",previous:{title:"Serverless Pathom with GCF",permalink:"/docs/tutorials/serverless-pathom-gcf"},next:{title:"GraphQL Integration",permalink:"/docs/tutorials/graphql-integration"}},p={},l=[{value:"IP Weather in Babashka",id:"ip-weather-in-babashka",level:2},{value:"Limitations",id:"limitations",level:2}],m={toc:l},c="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Pathom 3 works with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babashka/babashka"},"Babashka"),"!"),(0,r.kt)("p",null,"To demo this, I'll re-use the sample example from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial"},"Pathom Tutorial"),", the code is mostly\nthe same, the following script runs as standalone with babashka:"),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Pathom usage requires Babashka ",(0,r.kt)("inlineCode",{parentName:"p"},"0.2.12")," or up.")),(0,r.kt)("h2",{id:"ip-weather-in-babashka"},"IP Weather in Babashka"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clojure"},'(ns pathom-babashka\n  (:require\n    [babashka.deps :as deps]))\n\n(deps/add-deps\n  \'{:deps {borkdude/spartan.spec {:git/url "https://github.com/borkdude/spartan.spec"\n                                  :sha     "03e1583622f7f3073e18d05b69f3ab6f2cf012b6"}\n           com.wsscode/pathom3   {:mvn/version "2021.07.10-alpha"}}})\n\n(require \'spartan.spec)\n(require \'[cheshire.core :as json])\n(require \'[com.wsscode.pathom3.connect.operation :as pco])\n(require \'[com.wsscode.pathom3.connect.built-in.resolvers :as pbir])\n(require \'[com.wsscode.pathom3.connect.indexes :as pci])\n(require \'[com.wsscode.pathom3.connect.operation :as pco])\n(require \'[com.wsscode.pathom3.interface.eql :as p.eql])\n\n(pco/defresolver geo-from-ip [{:keys [geo-js/ip]}]\n  {::pco/output [:geo-js/asn\n                 :geo-js/organization_name\n                 :geo-js/organization\n                 :geo-js/ip\n                 :geo-js/timezone\n                 :geo-js/longitude\n                 :geo-js/latitude\n                 :geo-js/country\n                 :geo-js/country_code3\n                 :geo-js/area_code\n                 :geo-js/region\n                 :geo-js/city\n                 :geo-js/country_code\n                 :geo-js/accuracy\n                 :geo-js/continent_code]}\n  (-> (slurp (str "https://get.geojs.io/v1/ip/geo/" ip ".json"))\n    (json/parse-string #(keyword "geo-js" %))))\n\n(pco/defresolver geo-lat-long->meta-search\n  [{:geo-js/keys [longitude latitude]}]\n  {:meta-weather/search-latt_long (str latitude "," longitude)})\n\n(pco/defresolver meta-weather-latlong-search\n  [{:meta-weather/keys [search-latt_long]}]\n  {::pco/output [:meta-weather/distance\n                 :meta-weather/title\n                 :meta-weather/location_type\n                 :meta-weather/woeid\n                 :meta-weather/latt_long]}\n  (-> (slurp (str "https://www.metaweather.com/api/location/search/?lattlong=" search-latt_long))\n    (json/parse-string #(keyword "meta-weather" %))\n    first))\n\n(pco/defresolver meta-weather-location\n  [{:meta-weather/keys [woeid]}]\n  {::pco/output\n   [:meta-weather/timezone_name\n    :meta-weather/sun_set\n    :meta-weather/location_type\n    :meta-weather/sun_rise\n    :meta-weather/latt_long\n    {:meta-weather/parent\n     [:meta-weather/title\n      :meta-weather/location_type\n      :meta-weather/woeid\n      :meta-weather/latt_long]}\n    :meta-weather/title\n    :meta-weather/woeid\n    {:meta-weather/sources\n     [:meta-weather/title\n      :meta-weather/slug\n      :meta-weather/url\n      :meta-weather/crawl_rate]}\n    :meta-weather/time\n    {:meta-weather/consolidated_weather\n     [:meta-weather/visibility\n      :meta-weather/weather_state_name\n      :meta-weather/humidity\n      :meta-weather/applicable_date\n      :meta-weather/air_pressure\n      :meta-weather/id\n      :meta-weather/weather_state_abbr\n      :meta-weather/predictability\n      :meta-weather/max_temp\n      :meta-weather/the_temp\n      :meta-weather/created\n      :meta-weather/wind_direction\n      :meta-weather/wind_speed\n      :meta-weather/min_temp\n      :meta-weather/wind_direction_compass]}\n    :meta-weather/timezone]}\n  (-> (slurp (str "https://www.metaweather.com/api/location/" woeid))\n    (json/parse-string #(keyword "meta-weather" %))))\n\n(pco/defresolver meta-weather-location-the-temp\n  [{:meta-weather/keys [consolidated_weather]}]\n  {::pco/output [:meta-weather/the_temp]}\n  (if-let [temp (-> consolidated_weather\n                  first\n                  :meta-weather/the_temp)]\n    {:meta-weather/the_temp temp}))\n\n(pco/defresolver its-cold? [{::keys [temperature cold-threshold]}]\n  {::cold? (< temperature cold-threshold)})\n\n(def env\n  (pci/register\n    [geo-from-ip\n     geo-lat-long->meta-search\n     meta-weather-latlong-search\n     meta-weather-location\n     meta-weather-location-the-temp\n     its-cold?\n     (pbir/constantly-resolver ::cold-threshold 20)\n     (pbir/alias-resolver ::ip :geo-js/ip)\n     (pbir/alias-resolver :meta-weather/the_temp ::temperature)]))\n\n(defn parse-data-args []\n  (apply hash-map (map read-string *command-line-args*)))\n\n(defn main [{:keys [ip] :as args}]\n  (println (str "Looking up the temperature on IP " ip "..."))\n  (let [{::keys [temperature]}\n        (p.eql/process env\n          {::ip ip}\n          [::temperature])]\n    (println (str "Temperature for IP " ip " is " temperature "C"))))\n\n(main (parse-data-args))\n')),(0,r.kt)("p",null,"Now we can run it like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bb pathom-demo.bb :ip '\"198.29.213.3\"'\n")),(0,r.kt)("p",null,"I measure the time to boot. On my computer, Babashka can boot and load Pathom in about\n300ms. This script's average total time is 2s ~ 3s on my computer (most of the time\nis waiting for HTTP responses)."),(0,r.kt)("p",null,"Just for fun, I compared it with the JVM implementation. On the JVM, to boot and make\nthe HTTP requests, it took 9 seconds here."),(0,r.kt)("h2",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"The current known limitation is that you can't call resolvers and mutations as functions."),(0,r.kt)("p",null,"This is due a limitation in Babashka, ",(0,r.kt)("inlineCode",{parentName:"p"},"defrecord")," can't implement ",(0,r.kt)("inlineCode",{parentName:"p"},"IFn"),", this may\nchange in the future."))}h.isMDXComponent=!0}}]);