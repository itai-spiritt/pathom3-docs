(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{105:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,h=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return a?r.a.createElement(h,c(c({ref:t},l),{},{components:a})):r.a.createElement(h,c({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},80:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),o=(a(0),a(105)),i={title:"GraphQL"},c={unversionedId:"integrations/graphql",id:"integrations/graphql",isDocsHomePage:!1,title:"GraphQL",description:"This page explains how Pathom consumes GraphQL services via dynamic resolvers",source:"@site/docs/integrations/graphql.mdx",slug:"/integrations/graphql",permalink:"/docs/integrations/graphql",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/integrations/graphql.mdx",version:"current",sidebar:"docs",previous:{title:"Shape Descriptor",permalink:"/docs/shape-descriptor"},next:{title:"Hacker News Scraper",permalink:"/docs/tutorials/hacker-news-scraper"}},s=[{value:"How Pathom translates from GraphQL",id:"how-pathom-translates-from-graphql",children:[{value:"Scalars",id:"scalars",children:[]},{value:"Object Types",id:"object-types",children:[]},{value:"Query Type",id:"query-type",children:[]},{value:"Interfaces",id:"interfaces",children:[]},{value:"Mutations",id:"mutations",children:[]}]},{value:"Complete tutorial",id:"complete-tutorial",children:[]}],l={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This page explains how Pathom consumes GraphQL services via ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/dynamic-resolvers"}),"dynamic resolvers")),Object(o.b)("p",null,"Pathom consumers GraphQL by first adapting a GraphQL schema to the Pathom format. The\nfollow sections will explain how each part of GraphQL translates to Pathom."),Object(o.b)("h2",{id:"how-pathom-translates-from-graphql"},"How Pathom translates from GraphQL"),Object(o.b)("p",null,"It's important to remember that Pathom and GraphQL use different base abstraction ideas."),Object(o.b)("p",null,"While GraphQL is based typed schema, Pathom works with attributes as the primary building blocks."),Object(o.b)("p",null,"Let's take a look in an example to see what this translation look like, take the\nfollowing GraphQL schema as an example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Query {\n  me: User\n}\n\ntype User {\n  id: ID\n  name: String\n}\n")),Object(o.b)("p",null,"When we connect to Pathom, it's required that you define a namespace to prefix all\nthe names that we will import from the GraphQL service."),Object(o.b)("p",null,"For this example I'll pick the name ",Object(o.b)("inlineCode",{parentName:"p"},'"gqldemo"'),", this is what the import code looks\nlike:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'(p.gql/connect-graphql\n  {::p.gql/namespace "gqldemo"}\n  request-graphql-fn)\n')),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("h3",Object(n.a)({parentName:"div"},{id:"the-request-function"}),"The request function"),Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"request-graphql-fn")," must be a function that takes a GraphQL string as input and\noutput the GraphQL JSON results converted to Clojure data structures. It's important\nthat you use strings for the keys (not keywords)."))),Object(o.b)("p",null,"With that configuration, we should expect the following attributes to be available\nfrom Pathom:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),":gqldemo.Query/me\n:gqldemo.User/id\n:gqldemo.User/name\n")),Object(o.b)("p",null,"An example query to fetch the name of the current user:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"[{:gqldemo.Query/me\n  [:gqldemo.User/name]}]\n")),Object(o.b)("h3",{id:"scalars"},"Scalars"),Object(o.b)("p",null,"Pathom doesn't do anything about scalars, in the context of Pathom integration with\nGraphQL they are irrelevant."),Object(o.b)("h3",{id:"object-types"},"Object Types"),Object(o.b)("p",null,"For each object type in GraphQL, Pathom will add one attribute to hold the type itself\nand one attribute for each property of that type in GraphQL."),Object(o.b)("p",null,"Getting back to our previous example, for the type ",Object(o.b)("inlineCode",{parentName:"p"},"User")," we will have this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"; type name\n:gqldemo.types/User\n\n; attributes for properties\n:gqldemo.User/id\n:gqldemo.User/name\n")),Object(o.b)("p",null,"It's important to note that ",Object(o.b)("inlineCode",{parentName:"p"},":gqldemo.types/User")," is marked as a transient attribute.\nThis means you can't query for it, but it's part of the query resolution."),Object(o.b)("p",null,"Having these types named allow us to reference the type (which means we can access\nall attributes of it) in a simple way."),Object(o.b)("h3",{id:"query-type"},"Query Type"),Object(o.b)("p",null,"Query types are first defined in the same way as the object types. The special thing\nabout the Query type is that Pathom will make it accessible from anywhere, so you can\nenter the GraphQL from its properties."),Object(o.b)("h3",{id:"interfaces"},"Interfaces"),Object(o.b)("p",null,"From Pathom point of view, interfaces work backwards. Pathom will find all the\nimplementations of the interface and link them will all implementor object types."),Object(o.b)("h3",{id:"mutations"},"Mutations"),Object(o.b)("p",null,"All mutations are imported all namespaced by the user prefix plus ",Object(o.b)("inlineCode",{parentName:"p"},".Mutation"),", for\nexample:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Mutation {\n  setMessage(message: String): String\n}\n")),Object(o.b)("p",null,"Here is how we call it:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'[(gqldemo.Mutation/setMessage {:message "Some message"})]\n')),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The namespace at the mutation params are not relevant, with or without a namespace\nPathom will send them as-is."))),Object(o.b)("p",null,"Depending on the mutation you may need to add a sub-query to satisfy the GraphQL\nsyntax."),Object(o.b)("p",null,"Taking another example from GraphQL documentation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"input MessageInput {\n  content: String\n  author: String\n}\n\ntype Message {\n  id: ID!\n  content: String\n  author: String\n}\n\ntype Query {\n  getMessage(id: ID!): Message\n}\n\ntype Mutation {\n  createMessage(input: MessageInput): Message\n  updateMessage(id: ID!, input: MessageInput): Message\n}\n")),Object(o.b)("p",null,"Using the same prefix as before, this is how we can call createMessage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'[{(gqldemo.Mutation/createMessage {:id 123 :content "Some message" :author "Margaret"})\n  [:gqldemo.Message/id\n   :gqldemo.Message/content]}]\n')),Object(o.b)("h2",{id:"complete-tutorial"},"Complete tutorial"),Object(o.b)("p",null,"If you like to see a more complete integration example check the\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tutorials/graphql-integration"}),"GraphQL Tutorial"),"."))}p.isMDXComponent=!0}}]);